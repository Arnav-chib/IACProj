version: '3.8'

services:
  # Database service
  db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD:-YourStrongPassword123}
      - MSSQL_PID=Express
    volumes:
      - mssql-data:/var/opt/mssql
    ports:
      - "1433:1433"
    networks:
      - app-network
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${DB_PASSWORD:-YourStrongPassword123}" -Q "SELECT 1" -b -o /dev/null
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API service
  api:
    build:
      context: ./server
      dockerfile: ${DOCKERFILE:-Dockerfile}
    depends_on:
      db:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      - JWT_SECRET=${JWT_SECRET:-your_random_secret_key_here}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost,http://localhost:3000}
    volumes:
      - ${API_VOLUMES:-}
    ports:
      - "3000:3000"
    networks:
      - app-network
    command: ${API_COMMAND:-npm start}
    restart: ${RESTART_POLICY:-unless-stopped}

  # Frontend service
  web:
    build:
      context: ./client
      dockerfile: ${DOCKERFILE:-Dockerfile}
    depends_on:
      - api
    volumes:
      - ${WEB_VOLUMES:-}
    ports:
      - "${WEB_PORT:-80}:${WEB_INTERNAL_PORT:-80}"
    networks:
      - app-network
    command: ${WEB_COMMAND:-npm start}
    environment:
      - REACT_APP_API_URL=${API_URL:-http://localhost:3000/api}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING:-false}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING:-false}
    restart: ${RESTART_POLICY:-unless-stopped}

networks:
  app-network:
    driver: bridge

volumes:
  mssql-data:
